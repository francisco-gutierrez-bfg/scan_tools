#!/bin/bash
# Created by Francisco Gutierrez G.
# Sr. Linux Engineer 2021

EDITOR=vim
location=`pwd`
date=`date +%d_%m_%Y` 


check_packages(){
# Verificando dependencias
if [ "$(dpkg -l | awk '/go/ {print }'|wc -l)" -ge 1 ]; then echo "installgo=1" > Install_dependencies/installchecks; else echo Golang no se encuentra instalado; fi
if [ "$(dpkg -l | awk '/hydra/ {print }'|wc -l)" -ge 1 ]; then echo "installhydra=1" >> Install_dependencies/installchecks; else echo Hydra no se encuentra instalado; fi
if [ "$(dpkg -l | awk '/ncat/ {print }'|wc -l)" -ge 1 ]; then echo "installncat=1" >> Install_dependencies/installchecks; else echo Ncat no se encuentra instalado; fi
if [ "$(dpkg -l | awk '/nikto/ {print }'|wc -l)" -ge 1 ]; then echo "installnikto=1" >> Install_dependencies/installchecks; else echo Nikto no se encuentra instalado; fi
if [ "$(dpkg -l | awk '/nmap/ {print }'|wc -l)" -ge 1 ]; then echo "installnmap=1" >> Install_dependencies/installchecks; else echo Nmap no se encuentra instalado; fi
if [ ! -d /usr/share/nmap/scripts/vulscan ]; then echo "Nmap Vulscan script no se encuentra instalado"; else echo "nmap-vulscan=1" >> Install_dependencies/installchecks; fi
if [ ! -d /usr/share/nmap/scripts/nmapvulners ]; then echo "Nmap Vulners script no se encuentra instalado"; else echo "nmap-vulners=1" >> Install_dependencies/installchecks; fi
}

installdeps(){
clear
echo ""
echo "   ######################################################################################"
echo "   #                        D E P E N D E N C Y - E R R O R S !                         #"
echo "   ######################################################################################"
echo "   #                                                                                    #"
echo "   ######################################################################################"
echo "   #                                                                                    #"
echo "   # Please install the necessary packages for this program to work properly.           #"
echo "   # Required packages are nmap, nikto, hydra, ncat, golang and scripts for vuln scan   #"
echo "   # called "nmap-vulners" and "scipag-_vulscan" from nmap which are located under      #"
echo "   # "Install_dependencies" folder.                                                     #"
echo "   #                                                                                    #"
echo "   ######################################################################################"
echo "   #                                                                                    #"
echo "   #    ██╗      Please be aware that if dependencies are no meet / installed           #"
echo "   #    ██║      You will not be able to run this program or any of its components.     #"
echo "   #    ██║      The system is going to ask for  system credentials in order to start   #"
echo "   #    ╚═╝      any dependency/package installation that is missing.                   #"
echo "   #    ██╗                                                                             #"
echo "   #    ╚═╝                                                                 Enjoy it!   #"
echo "   #                                                                                    #"
echo "   ######################################################################################"
echo ""
read -p "   Do you wish to install depéndencies? (y/n):" resp
    case $resp in
        [Yy]* ) echo "" && echo "   Looks like some dependencies must be installed." && cd Install_dependencies && ./install_dependencies &> ../Modules/REPORTS/dependencies.txt & progress1 && cd $location;;
        [Nn]* ) exit ;;
        * ) echo "Please answer 'y' or 'Y' for yes y o and 'n' or 'N' for no.";;
    esac
echo ""
}

progress(){
PID=$!
i=1
sp="/-\|"
echo -n ' '
while [ -d /proc/$PID ]
do
  printf "\b${sp:i++%${#sp}:1}"
done
}

progress1(){
perl -e '$|=@s=qw(<->=============] =<->============] ==<->===========] ===<->==========] ====<->=========] =====<->========] ======<->=======] =======<->======] ========<->=====] ========<->=====] =========<->====] ==========<->===] ===========<->==] ============<->=] =============<->] ============<->=] ===========<->==] ==========<->===] =========<->====] ========<->=====] =======<->======] ======<->=======] =====<->========] ====<->=========] ===<->==========] ==<->===========] =<->============]);while(kill 0,'$!'){ print "\r   Instalando Dependencias[",$s[$t++%($#s+1)];select(undef,undef,undef,0.2);}'
}

pause(){
  echo ""
  read -p "       [Press [Enter] to continue.]" fackEnterKey
}

one(){
        cd Modules/NMAP_GO
        echo "  Check and Scan for patches and or CVE's with NMAP"
        echo "  #################################################"
        echo ""
        read -p "Type a device IP ro scan scan:" ip
        echo ""
        echo "  Checking for pending updates and patches:" 
        go run nmap_cve_check.go $ip > ../REPORTS/Escaneo_de_CVEs_$ip_$date.txt & progress1
        cd $location
        pause
}

two(){  
        cd Modules/NMAP_GO
        echo "Vulnerabilities scanning with NMAP"
        echo "##################################"
        echo ""
        read -p "Type a device IP ro scan scan:" ip
        echo ""
        go run nmap_vulnerabilities.go $ip > ../REPORTS/Escaneo_vulnerabilidades_$ip_$date.txt & progress1
        cd $location
        pause
}

three(){
        cd Modules/NIKTO_GO
        echo "Web vulnerability scanning with NIKTO"
        echo "#####################################"
        read -p "Type a device IP ro scan scan:" ip
        read -p "Type a web application port:" puerto
        go run nikto_go.go $ip:$puerto > ../REPORTS/Escaneo_vulnerabilidades_apps_web_$ip_$date.txt & progress1
        cd $location
        pause
}

four(){
        cd Modules/NMAP_GO
        echo "Open ports scanning validation"
        echo "##############################"
        read -p "Type a device IP ro scan scan:" ip
        echo ""
        echo "Open ports list"
        echo "==============="
        go run port_scanner.go $ip | sed 's/Open/Abierto/g' | sed 's/Port/Puerto/g' > ../REPORTS/Puertos_abiertos_en_$ip_$date.txt & progress1
        cd $location
        pause
}

five(){
        cd Modules/HYDRA_GO 
        echo "Pentesting with Hydra"
        echo "#####################"
        read -p "Type a device IP ro scan scan:" ip
        read -p "Type service name, Ex: rdp,ssh,ftp,telnet:" servicio
        echo ""
        echo "Executing brute force attack with multiple dictionaries"
        echo "=================================================="
        go run hydra_go.go $ip $servicio | grep -vi github | grep -vi warning
        cd $location
        pause
}
show_menus() {
	clear
        echo ""
	echo "  ========================== ~~~~~~~~~~~~~~~~~~~~~ ============================="	
	echo "  ========================== ~~~~~~~~~~~~~~~~~~~~~ ============================="	
	echo "                             |    MAIN - MENU    | "
	echo "                             ~~~~~~~~~~~~~~~~~~~~~"
	echo "  ========================== ~~~~~~~~~~~~~~~~~~~~~ ============================="	
	echo "  **           1. Check and Scan for patches and or CVE's with NMAP           **"
	echo "  **           2. Vulnerabilities scanning with NMAP                          **"
	echo "  **           3. Web vulnerability scanning with NIKTO                       **"
	echo "  **           4. Open ports scanning validation                              **"
	echo "  **           5. Pentesting with Hydra                                       **"
	echo "  **           6. Exit                                                        **"
	echo "  ========================== ~~~~~~~~~~~~~~~~~~~~~ ============================="	
}

read_options(){
	local choice
	read -p "                          |Type an option [1-6] :" choice
        echo ""
	case $choice in
		1) one;;
		2) two ;;
		3) three ;;
		4) four ;;
		5) five ;;
		6) exit ;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}
 
# ----------------------------------------------
# Detects CTRL+C, CTRL+Z like "escape" to exit
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP
 
# -------------------------------------------
# Main Function - inifinite conditional loop
# -------------------------------------------
while true
do
        check_packages
        if [ `cat Install_dependencies/installchecks | grep 1 | wc -l` != 7 ]
        then
        cd $location
        installdeps
        else
	show_menus
	read_options
        fi
done
